.include "nominal.jsim"
.include "stdcell.jsim"
.include "lab5pc.jsim"

**********************************************************************

*1-bit full adder
.subckt FA a b cin sum cout
X1 a b 1 xor2 
X2 1 cin sum xor2 
X3 a b 2 and2
X4 1 cin 3 and2
X5 2 3 cout or2 
.ends 

*part a: adder unit
.subckt adder32 ALUFN[0] A[31:0] B[31:0] s[31:0] z v n
*B to XB 
XxorB B[31:0] ALUFN[0]#32 XB[31:0] xor2 

*32-bit adder
*including ALUFN0 input for FA0 
XFA0 A[0] XB[0] ALUFN[0] S[0] C[0] FA
*carry-out ripple effect for the rest
XFA A[31:1] XB[31:1] C[30:0] S[31:1] C[31:1] FA

*output z - check for all S=0
Xnor1 s[3:0] 1 nor4 
Xnor2 s[7:4] 2 nor4
Xnor3 s[11:8] 3 nor4
Xnor4 s[15:12] 4 nor4
Xnor5 s[19:16] 5 nor4
Xnor6 s[23:20] 6 nor4
Xnor7 s[27:24] 7 nor4
Xnor8 s[31:28] 8 nor4
Xand1 1 2 3 4 out1 and4
Xand2 5 6 7 8 out2 and4
Xand3 out1 out2 z and2

*ouput v - overflow check
XinvA A[31] Ai[31] inverter
XinvB XB[31] XBi[31] inverter
XinvS S[31] Si[31] inverter
Xand01 A[31] XB[31] Si[31] p and3
Xand02 Ai[31] XBi[31] S[31] o and3
Xorr p o v or2 

*output n - negative check 
Xneg s[31] n buffer
.ends

**********************************************************************

*program counter 
 
.subckt pc clk reset ia[31:0]
*4 in binary 
X4bin01 B[31:3] constant0 
X4bin02 B[2] constant1
X4bin03 B[1:0] constant0

*adding 4 at each clock cycle
XPCadder 0 ia[31:0] B[31:0] PCadderoutput[31:0] z v n adder32

XPCresetmux reset#32 PCadderoutput[31:0] 0#32 PCresetmuxoutput[31:0] mux2 

XPCDreg PCresetmuxoutput[31:0] clk#32 ia[31:0] dreg

.ends
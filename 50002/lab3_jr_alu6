.include "nominal.jsim"
.include "stdcell.jsim"
.include "lab3checkoff_6.jsim" 

*1-bit full adder
.subckt FA a b cin sum cout
X1 a b 1 xor2 
X2 1 cin sum xor2 
X3 a b 2 and2
X4 1 cin 3 and2
X5 2 3 cout or2 
.ends 

**********************************************************************

*part a: adder unit
.subckt adder32 ALUFN[0] A[31:0] B[31:0] s[31:0] z v n
*B to XB 
XxorB B[31:0] ALUFN[0]#32 XB[31:0] xor2 

*32-bit adder
*including ALUFN0 input for FA0 
XFA0 A[0] XB[0] ALUFN[0] S[0] C[0] FA
*carry-out ripple effect for the rest
XFA A[31:1] XB[31:1] C[30:0] S[31:1] C[31:1] FA

*output z - check for all S=0
Xnor1 s[3:0] 1 nor4 
Xnor2 s[7:4] 2 nor4
Xnor3 s[11:8] 3 nor4
Xnor4 s[15:12] 4 nor4
Xnor5 s[19:16] 5 nor4
Xnor6 s[23:20] 6 nor4
Xnor7 s[27:24] 7 nor4
Xnor8 s[31:28] 8 nor4
Xand1 1 2 3 4 out1 and4
Xand2 5 6 7 8 out2 and4
Xand3 out1 out2 z and2

*ouput v - overflow check
XinvA A[31] Ai[31] inverter
XinvB XB[31] XBi[31] inverter
XinvS S[31] Si[31] inverter
Xand01 A[31] XB[31] Si[31] p and3
Xand02 Ai[31] XBi[31] S[31] o and3
Xorr p o v or2 

*output n - negative check 
Xneg s[31] n buffer
.ends

**********************************************************************

*part b: compare unit 
.subckt compare32 ALUFN[2:1] z v n cmp[31:0]
*upper 31 bits are always 0 
.connect cmp[31:1] 0
*a < b 
Xxornv v n vxorn xor2
*a <= b
Xorz vxorn z orz or2
*output for compare unit
Xmux ALUFN2 ALUFN1 0 vxorn z orz cmp0 mux4
.ends

**********************************************************************

*part c: boolean unit
.subckt boole32 ALUFN[3:0] A[31:0] B[31:0] boole[31:0]
Xmuxes A[31:0] B[31:0] ALUFN0#32 ALUFN1#32 ALUFN2#32 ALUFN3#32 boole[31:0] mux4
.ends

**********************************************************************

*part d: shift unit 
.subckt shift32 ALUFN[1:0] A[31:0] B[4:0] shift[31:0]

XSHL4 B[4]#32 A[31:0] A[15:0] 0#16 W[31:0] mux2
XSHL3 B[3]#32 W[31:0] W[23:0] 0#8 X[31:0] mux2 
XSHL2 B[2]#32 X[31:0] X[27:0] 0#4 Y[31:0] mux2
XSHL1 B[1]#32 Y[31:0] Y[29:0] 0#2 Z[31:0] mux2
XSHL0 B[0]#32 Z[31:0] Z[30:0] 0 SHL[31:0] mux2 

XSHR4 B[4]#32 A[31:0] 0#16 A[31:16] Q[31:0] mux2
XSHR3 B[3]#32 Q[31:0] 0#8 Q[31:8] E[31:0] mux2
XSHR2 B[2]#32 E[31:0] 0#4 E[31:4] R[31:0] mux2
XSHR1 B[1]#32 R[31:0] 0#2 R[31:2] T[31:0] mux2
XSHR0 B[0]#32 T[31:0] 0 T[31:1] SHR[31:0] mux2 

XSRA4 B[4]#32 A[31:0] A[31]#16 A[31:16] S[31:0] mux2
XSRA3 B[3]#32 S[31:0] S[31]#8 S[31:8] D[31:0] mux2
XSRA2 B[2]#32 D[31:0] D[31]#4 D[31:4] F[31:0] mux2
XSRA1 B[1]#32 F[31:0] F[31]#2 F[31:2] G[31:0] mux2
XSRA0 B[0]#32 G[31:0] G[31] G[31:1] SRA[31:0] mux2

Xshift ALUFN[0]#32 ALUFN[1]#32 SHL[31:0] SHR[31:0] 0#32 SRA[31:0] shift[31:0] mux4

.ends

**********************************************************************

*part e: combine and make the ALU
.subckt alu ALUFN[5:0] A[31:0] B[31:0] alu[31:0] z v n
Xadderunit ALUFN[0] A[31:0] B[31:0] S[31:0] z v n adder32 
Xbooleanunit ALUFN[3:0] A[31:0] B[31:0] boole[31:0] boole32
Xshiftunit ALUFN[1:0] A[31:0] B[4:0] shift[31:0] shift32
Xcompareunit ALUFN[2:1] z v n cmp[31:0] compare32
XcombinemuxtoALU ALUFN[4]#32 ALUFN[5]#32 S[31:0] boole[31:0] shift[31:0] cmp[31:0] alu[31:0] mux4
.ends




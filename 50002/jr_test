* Checkoff for Lab#6
.include "nominal.jsim"
.include "stdcell.jsim"
.include "lab5checkoff.jsim"
******************************************************************************************************************************************
* CHECKOFF

* FULL ADDER

.subckt FA a b ci s co

*sum
Xfaxor1 a b p xor2
Xfaxor2 p ci s xor2

*carry out
Xfaand1 ci p m and2 
Xfaand2 a b n and2
Xfaor m n co or2

.ends
******************************************************************************************************************************************
*(A) Adder / Subtractor unit

/* INPUTS:
- A[31:0]
- B[31:0]
- ALUFN[0]: Carry-in for FA0 

OUTPUTS:
- S[31:0]
- Z: True when S outputs are all 0
- V: True when addition operation overflows
- N: True when S is negative (S31 = 1)
*/

.subckt adder32 ALUFN[0] A[31:0] B[31:0] s[31:0] z v n

* B to XB
* 2-input XOR = 1 output (XB)
Xxbxor B[31:0] ALUFN[0]#32 XB[31:0] xor2

* 32-bit adder
* FA0: Input A[0], XB[0], ALUFN[0] + Output sum[0] & carry[0]
* FA1 to FA31: Input A[31:1], XB[31:1], carry in[30:0] + Output sum[31:1] & carry[31:1]
Xfa0 A[0] XB[0] ALUFN[0] s[0] C[0] FA
Xfa1to31 A[31:1] XB[31:1] C[30:0] s[31:1] C[31:1] FA

* Z: 
* 8 4-input NOR = 8 outputs 
* 2 4-input AND = 2 outputs
* 1 2-input AND = 1 output
Xznor4 s[31:24] s[23:16] s[15:8] s[7:0] SO[7:0] nor4
Xzand4 SO[7:6] SO[5:4] SO[3:2] SO[1:0] SOO[1:0] and4
Xzand2 SOO[1] SOO[0] z and2

* V: 
* 3 1-input INV = 3 outputs to use for AND
* 2 3-input AND = 2 outputs
* 1 2-input OR = 1 outputs
Xmyinv1 s[31] IS[31] inverter
Xmyinv2 A[31] IXA[31] inverter
Xmyinv3 XB[31] IXB[31] inverter
Xmyand1 A[31] XB[31] IS[31] 1V and3
Xmyand2 IXA[31] IXB[31] S[31] 2V and3
Xmyor 1V 2V v or2

* N: 
* Reads s[31]: 1 1-input buffer
Xmybuffer s31 n buffer

.ends
******************************************************************************************************************************************
*(B) 32-bit compare unit

/* INPUTS:
- Z: True when S outputs are all 0
- V: True when addition operation overflows
- N: True when S is negative (S31 = 1)

OUTPUTS:
- cmp0: Output of least significant beat determines which constant ("0" or "1") is generated
*/

.subckt compare32 ALUFN[2:1] z v n cmp[31:0]

* A = B 
Xcompbuffer z equal buffer

* A < B
Xcompxor n v less xor2

* A <= B
Xcompor equal less eless or2

* High order 31 bits of the output are always 0
Xcompcons cmp[31:1] constant0

* To determine the LSB, a mux is used
Xcompmux ALUFN[1] ALUFN[2] 0 equal less eless cmp0 mux4

.ends
******************************************************************************************************************************************
*(C) 32-bit Boolean unit

/* INPUTS:
- ALUFN[3:0]
- A[31:0]
- B[31:0]

OUTPUTS:
- boole[31:0]
*/

.subckt boole32 ALUFN[3:0] A[31:0] B[31:0] boole[31:0]

* 32 copies of a 4-input mux
Xboolmux A[31:0] B[31:0] ALUFN[0]#32 ALUFN[1]#32 ALUFN[2]#32 ALUFN[3]#32 boole[31:0] mux4

.ends
******************************************************************************************************************************************
*(D) 32-bit shifter

/* INPUTS:
- ALUFN[1:0]: [0] 0 for left shift, 1 for right shift | [1] 0 for SR, 1 for SRA
- A[31:0]
- B[4:0]

OUTPUTS:
- shift[31:0]
*/

.subckt shift32 ALUFN[1:0] A[31:0] B[4:0] shift[31:0]

* SHL: Left shifter (ALUFN[0] is 0)
* Vacated bit positions filled with 0
Xshiftlmux1 B[4]#16 A[31:16] A[15:0] W[31:16] mux2
Xshiftlmux2 B[4]#16 A[15:0] 0#16 W[15:0] mux2
Xshiftlmux3 B[3]#24 W[31:8] W[23:0] X[31:8] mux2
Xshiftlmux4 B[3]#8 W[7:0] 0#8 X[7:0] mux2
Xshiftlmux5 B[2]#28 X[31:4] X[27:0] Y[31:4] mux2
Xshiftlmux6 B[2]#4 X[3:0] 0#4 Y[3:0] mux2
Xshiftlmux7 B[1]#30 Y[31:2] Y[29:0] Z[31:2] mux2
Xshiftlmux8 B[1]#2 Y[1:0] 0#2 Z[1:0] mux2
Xshiftlmux9 B[0]#31 Z[31:1] Z[30:0] SL[31:1] mux2
Xshiftlmux10 B[0]#1 Z[0] 0#1 SL[0] mux2

* SHR: Right shifter (ALUFN[0] is 1)
* Vacated bit positions filled with 0
Xshiftrmux1 B[4]#16 A[31:16] 0#16 O[31:16] mux2
Xshiftrmux2 B[4]#16 A[15:0] A[31:16] O[15:0] mux2
Xshiftrmux3 B[3]#8 O[31:24] 0#8 P[31:24] mux2
Xshiftrmux4 B[3]#24 O[23:0] O[31:8] P[23:0] mux2
Xshiftrmux5 B[2]#4 P[31:28] 0#4 Q[31:28] mux2
Xshiftrmux6 B[2]#28 P[27:0] P[31:4] Q[27:0] mux2
Xshiftrmux7 B[1]#2 Q[31:30] 0#2 R[31:30] mux2
Xshiftrmux8 B[1]#30 Q[29:0] Q[31:2] R[29:0] mux2
Xshiftrmux9 B[0]#1 R[31] 0#1 SR[31] mux2
Xshiftrmux10 B[0]#31 R[30:0] R[31:1] SR[30:0] mux2

* SRA: Right shifter with sign extension (ALUFN[0] is 1)
* Vacated bit positions filled with A31
Xshiftramux1 B[4]#16 A[31:16] A31#16 S[31:16] mux2
Xshiftramux2 B[4]#16 A[15:0] A[31:16] S[15:0] mux2
Xshiftramux3 B[3]#8 S[31:24] A31#8 T[31:24] mux2
Xshiftramux4 B[3]#24 S[23:0] S[31:8] T[23:0] mux2
Xshiftramux5 B[2]#4 T[31:28] A31#4 U[31:28] mux2
Xshiftramux6 B[2]#28 T[27:0] T[31:4] U[27:0] mux2
Xshiftramux7 B[1]#2 U[31:30] A31#2 V[31:30] mux2
Xshiftramux8 B[1]#30 U[29:0] U[31:2] V[29:0] mux2
Xshiftramux9 B[0]#1 V[31] A31#1 SRA[31] mux2
Xshiftramux10 B[0]#31 V[30:0] V[31:1] SRA[30:0] mux2

* 4-way 32 bit multiplexer to select
Xshiftselectormux ALUFN[1]#32 ALUFN[0]#32 SL[31:0] 0#32 SR[31:0] SRA[31:0] shift[31:0] mux4

.ends
******************************************************************************************************************************************
* ALU: (A)+(B)+(C)+(D)

/* INPUTS:
- ALUFN[5:0]: Control signals

OUTPUTS:
- alu[31:0]
*/

.subckt alu ALUFN[5:0] A[31:0] B[31:0] alu[31:0] z v n

Xadder ALUFN[0] A[31:0] B[31:0] s[31:0] z v n adder32
Xcomp ALUFN[2:1] z v n cmp[31:0] compare32
Xboolean ALUFN[3:0] A[31:0] B[31:0] boole[31:0] boole32
Xshift ALUFN[1:0] A[31:0] B[4:0] shift[31:0] shift32

Xalumux ALUFN[4]#32 ALUFN[5]#32 s[31:0] boole[31:0] shift[31:0] cmp[31:0] alu[31:0] mux4

.ends
**************************************************************************************************************************************
**************************************************************************************************************************************
* PC

.subckt pc clk reset pcsel[2:0] jt[31:0] plusc[31:0] ia[31:0] pcadderout[31:0]
*.subckt pc clk reset ia[31:0]

// PCSEL[2:0]
*XAdr: 0x80000008 == 1000 0000 0000 0000 0000 0000 0000 1000 == vdd 0#27 vdd 0#3
*IllOp: 0x80000004 ==  1000 0000 0000 0000 0000 0000 0000 0100 == vdd 0#28 vdd 0#2
Xpcselmux1 pcsel[2]#32 pcadderout[31:0] vdd 0#27 vdd 0#3 output[31:0] mux2
Xpcselmux2 pcsel[1]#32 pcsel[0]#32 output[31:0] jt[31:0] plusc[31:0] vdd 0#28 vdd 0#2 iap[31:0] mux4

// +4 counter
Xplusfour01 plusfour[31:3] constant0
Xplusfour02 plusfour[2] constant1
Xplusfour03 plusfour[1:0] constant0

Xpcadder 0 ia[31:0] plusfour[31:0] pcadderout[31:0] z v n adder32
*Xpcadder 0 ia[31:0] 0#29 vdd 0#2 pcadderout[31:0] z v n adder32 (without using +4 counter)
Xpcmux reset#32 iap[31:0] vdd 0#31 pcmuxout[31:0] mux2
Xpcdreg pcmuxout[31:0] clk#32 ia[31:0] dreg

.ends
********************************************************************************************************************************************
.subckt regfile clk werf wasel ra2sel ra[4:0] rb[4:0] rc[4:0] wdata[31:0] radata[31:0] rbdata[31:0]

Xregfile
+ vdd 0 0 ra[4:0] adata[31:0]     // A read port
+ vdd 0 0 ra2mux[4:0] bdata[31:0] // B read port
+ 0 clk werf wa[4:0] wdata[31:0]  // write port
+ $memory width=32 nlocations=31

Xrfmux01 ra2sel#5 rb[4:0] rc[4:0] ra2mux[4:0] mux2

Xrfra01 ra[3:0] z1 and4
Xrfra02 ra[4] z1 z2 and2

Xrfra201 ra2mux[3:0] z3 and4
Xrfra202 ra2mux[4] z3 z4 and2

Xrfmux02 z2#32 adata[31:0] 0#32 radata[31:0] mux2
Xrfmux03 z4#32 bdata[31:0] 0#32 rbdata[31:0] mux2

// WASEL mux
Xrfwaselmux wasel#5 rc[4:0] vdd#4 0 wa[4:0] mux2

.ends
********************************************************************************************************************************************
* CTL
.subckt ctl reset id[31:26] z pcsel[2:0] wasel asel ra2sel bsel alufn[5:0] wdsel[1:0] werf moe wr
xctl vdd 0 0 id[31:26]
+ pcsela[2:0] wasel asel ra2sel bsel alufn[5:0] wdsel[1:0] werf moe xwr
+ $memory width=18 nlocations=64 contents=(

+ 0b011100000000000100 // 0
+ 0b011100000000000100 // 1
+ 0b011100000000000100 // 2
+ 0b011100000000000100 // 3
+ 0b011100000000000100 // 4
+ 0b011100000000000100 // 5
+ 0b011100000000000100 // 6
+ 0b011100000000000100 // 7
+ 0b011100000000000100 // 8
+ 0b011100000000000100 // 9
+ 0b011100000000000100 // 10
+ 0b011100000000000100 // 11
+ 0b011100000000000100 // 12
+ 0b011100000000000100 // 13
+ 0b011100000000000100 // 14
+ 0b011100000000000100 // 15
+ 0b011100000000000100 // 16
+ 0b011100000000000100 // 17
+ 0b011100000000000100 // 18
+ 0b011100000000000100 // 19
+ 0b011100000000000100 // 20
+ 0b011100000000000100 // 21
+ 0b100100000000000100 // IRQ (22)
+ 0b011100000000000100 // 23
+ 0b000000100000010110 // LD (24)
+ 0b000001100000000001 // ST (25)
+ 0b011100000000000100 // 26
+ 0b010000000000000100 // JMP (27)
+ 0b011100000000000100 // 28
+ 0b001000000000000100 // BEQ (29)
+ 0b001000000000000100 // BNE (30)
+ 0b000010001101010110 // LDR (31)
+ 0b000000000000001100 // ADD (32)
+ 0b000000000000101100 // SUB (33)
+ 0b011100000000000100 // 34
+ 0b011100000000000100 // 35
+ 0b000000011001101100 // CMPEQ (36)
+ 0b000000011010101100 // CMPLT (37)
+ 0b000000011011101100 // CMPLE (38)
+ 0b011100000000000100 // 39
+ 0b000000001100001100 // AND (40)
+ 0b000000001111001100 // OR (41)
+ 0b000000001011001100 // XOR (42)
+ 0b011100000000000100 // 43
+ 0b000000010000001100 // SHL (44)
+ 0b000000010000101100 // SHR (45)
+ 0b000000010001101100 // SRA (46)
+ 0b011100000000000100 // 47
+ 0b000000100000001100 // ADDC (48)
+ 0b000000100000101100 // SUBC (49)
+ 0b011100000000000100 // 50
+ 0b011100000000000100 // 51
+ 0b000000111001101100 // CMPEQC (52)
+ 0b000000111010101100 // CMPLTC (53)
+ 0b000000111011101100 // CMPLEC (54)
+ 0b011100000000000100 // 55 
+ 0b000000101100001100 // ANDC (56)
+ 0b000000101111001100 // ORC (57)
+ 0b000000101011001100 // XORC (58)
+ 0b011100000000000100 // 59
+ 0b000000110000001100 // SHLC (60)
+ 0b000000110000101100 // SHRC (61)
+ 0b000000110001101100 // SRAC (62)
+ 0b011100000000000100 // 63
+ )


xctlmux reset xwr 0 wr mux2

xctlinverter z t inverter

//BNE & BEQ
xctlbeq1 id[31] k inverter
xctlbeq2 id[27] s inverter
xctlbeq3 id[26] s n and2
xctlbeq4 k id[30] id[29] id[28] m and4
xctlbeq5 n m out and2
xctlbeq6 out r pcsela[0] z t 0 pcsel[0] mux4
xctlbeq7 pcsela[2:1] pcsel[2:1] buffer

xctlbne1 id[26] p inverter
xctlbne2 id[27] p q and2
xctlbne3 q m r and2

.ends
******************************************************************************************************************************************
******************************************************************************************************************************************
* BETA

* Basic Block

.subckt beta clk reset irq ia[31:0] id[31:0] ma[31:0] moe mrd[31:0] wr mwd[31:0]

//connect the pc
Xpc clk reset pcsel[2:0] jt[31] aseldata[30:2] 0#2 plusc[31:0] ia[31:0] pcd[31:0] pc

//connect regfile
Xregfile clk werf wasel ra2sel id[20:11] id[25:21] wdata[31:0] aseldata[31:0] mwd[31:0] regfile

//connect ctl
Xctl reset op[5:0] z pcsel[2:0] wasel asel ra2sel bsel alufn[5:0] wdsel[1:0] werf moe wr ctl

xPlusc 0 pcd[31:0] id[15]#14 id[15:0] 0#2 plusc[31:0] z0 v0 n0 adder32

//muxes
xaselmux asel#32 aseldata[31:0] 0 plusc[30:0] radata[31:0] mux2
xbselmux bsel#32 mwd[31:0] id[15]#16 id[15:0] rbdata[31:0] mux2
xwdselmux wdsel[1]#32 wdsel[0]#32 pcd[31:0] mrd[31:0] ma[31:0] 0#32 wdata[31:0] mux4

//interrupt request
xirq ia[31]#6 irq#6 id[31:26] id[31:26] 0 vdd 0 vdd#2 0 id[31:26] op[5:0] mux4

xCheckNOR aseldata[31:0] z checknor // subckt for checknor below
xpo aseldata[31] ia[31] jt[31] and2
xalu alufn[5:0] radata[31:0] rbdata[31:0] ma[31:0] z1 v1 n1 alu 

.ends

.subckt checknor a[31:0] z 
Xnor a[31:0] b[16:1] nor2
Xand1 b[16:1] c[4:1] and4
Xand2 c1 c2 c3 c4 z and4
.ends
******************************************************************************************************************************************
******************************************************************************************************************************************

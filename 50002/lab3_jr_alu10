.include "nominal.jsim"
.include "stdcell.jsim"
*.include "lab3multiply.jsim"
.include "lab3checkoff_10.jsim" 

*1-bit full adder
.subckt FA a b cin sum cout
X1 a b 1 xor2 
X2 1 cin sum xor2 
X3 a b 2 and2
X4 1 cin 3 and2
X5 2 3 cout or2 
.ends 

**********************************************************************

*part a: adder unit
.subckt adder32 ALUFN[0] A[31:0] B[31:0] s[31:0] z v n
*B to XB 
XxorB B[31:0] ALUFN[0]#32 XB[31:0] xor2 

*32-bit adder
*including ALUFN0 input for FA0 
XFA0 A[0] XB[0] ALUFN[0] S[0] C[0] FA
*carry-out ripple effect for the rest
XFA A[31:1] XB[31:1] C[30:0] S[31:1] C[31:1] FA

*output z - check for all S=0
Xnor1 s[3:0] 1 nor4 
Xnor2 s[7:4] 2 nor4
Xnor3 s[11:8] 3 nor4
Xnor4 s[15:12] 4 nor4
Xnor5 s[19:16] 5 nor4
Xnor6 s[23:20] 6 nor4
Xnor7 s[27:24] 7 nor4
Xnor8 s[31:28] 8 nor4
Xand1 1 2 3 4 out1 and4
Xand2 5 6 7 8 out2 and4
Xand3 out1 out2 z and2

*ouput v - overflow check
XinvA A[31] Ai[31] inverter
XinvB XB[31] XBi[31] inverter
XinvS S[31] Si[31] inverter
Xand01 A[31] XB[31] Si[31] p and3
Xand02 Ai[31] XBi[31] S[31] o and3
Xorr p o v or2 

*output n - negative check 
Xneg s[31] n buffer
.ends

**********************************************************************

*part b: compare unit 
.subckt compare32 ALUFN[2:1] z v n cmp[31:0]
*upper 31 bits are always 0 
.connect cmp[31:1] 0
*a < b 
Xxornv v n vxorn xor2
*a <= b
Xorz vxorn z orz or2
*output for compare unit
Xmux ALUFN2 ALUFN1 0 vxorn z orz cmp0 mux4
.ends

**********************************************************************

*part c: boolean unit
.subckt boole32 ALUFN[3:0] A[31:0] B[31:0] boole[31:0]
Xmuxes A[31:0] B[31:0] ALUFN0#32 ALUFN1#32 ALUFN2#32 ALUFN3#32 boole[31:0] mux4
.ends

**********************************************************************

*part d: shift unit 
.subckt shift32 ALUFN[1:0] A[31:0] B[4:0] shift[31:0]

XSHL4 B[4]#32 A[31:0] A[15:0] 0#16 W[31:0] mux2
XSHL3 B[3]#32 W[31:0] W[23:0] 0#8 X[31:0] mux2 
XSHL2 B[2]#32 X[31:0] X[27:0] 0#4 Y[31:0] mux2
XSHL1 B[1]#32 Y[31:0] Y[29:0] 0#2 Z[31:0] mux2
XSHL0 B[0]#32 Z[31:0] Z[30:0] 0 SHL[31:0] mux2 

XSHR4 B[4]#32 A[31:0] 0#16 A[31:16] Q[31:0] mux2
XSHR3 B[3]#32 Q[31:0] 0#8 Q[31:8] E[31:0] mux2
XSHR2 B[2]#32 E[31:0] 0#4 E[31:4] R[31:0] mux2
XSHR1 B[1]#32 R[31:0] 0#2 R[31:2] T[31:0] mux2
XSHR0 B[0]#32 T[31:0] 0 T[31:1] SHR[31:0] mux2 

XSRA4 B[4]#32 A[31:0] A[31]#16 A[31:16] S[31:0] mux2
XSRA3 B[3]#32 S[31:0] S[31]#8 S[31:8] D[31:0] mux2
XSRA2 B[2]#32 D[31:0] D[31]#4 D[31:4] F[31:0] mux2
XSRA1 B[1]#32 F[31:0] F[31]#2 F[31:2] G[31:0] mux2
XSRA0 B[0]#32 G[31:0] G[31] G[31:1] SRA[31:0] mux2

Xshift ALUFN[0]#32 ALUFN[1]#32 SHL[31:0] SHR[31:0] 0#32 SRA[31:0] shift[31:0] mux4

.ends

**********************************************************************
/*
*part e: combine and make the ALU
.subckt alu ALUFN[5:0] A[31:0] B[31:0] alu[31:0] z v n
Xadderunit ALUFN[0] A[31:0] B[31:0] S[31:0] z v n adder32 
Xbooleanunit ALUFN[3:0] A[31:0] B[31:0] boole[31:0] boole32
Xshiftunit ALUFN[1:0] A[31:0] B[4:0] shift[31:0] shift32
Xcompareunit ALUFN[2:1] z v n cmp[31:0] compare32
XcombinemuxtoALU ALUFN[4]#32 ALUFN[5]#32 S[31:0] boole[31:0] shift[31:0] cmp[31:0] alu[31:0] mux4
.ends
*/

**********************************************************************

*part 2: multiplier 
.subckt multiply32 A[31:0] B[31:0] P[31:0] 

Xn00 A[31:0] B[0]#32 00n[31:0] and2
Xn01 A[30:0] B[1]#31 01n[30:0] and2 
Xn02 A[29:0] B[2]#30 02n[29:0] and2 
Xn03 A[28:0] B[3]#29 03n[28:0] and2 
Xn04 A[27:0] B[4]#28 04n[27:0] and2
Xn05 A[26:0] B[5]#27 05n[26:0] and2
Xn06 A[25:0] B[6]#26 06n[25:0] and2
Xn07 A[24:0] B[7]#25 07n[24:0] and2
Xn08 A[23:0] B[8]#24 08n[23:0] and2
Xn09 A[22:0] B[9]#23 09n[22:0] and2
Xn10 A[21:0] B[10]#22 10n[21:0] and2
Xn11 A[20:0] B[11]#21 11n[20:0] and2
Xn12 A[19:0] B[12]#20 12n[19:0] and2
Xn13 A[18:0] B[13]#19 13n[18:0] and2
Xn14 A[17:0] B[14]#18 14n[17:0] and2
Xn15 A[16:0] B[15]#17 15n[16:0] and2
Xn16 A[15:0] B[16]#16 16n[15:0] and2
Xn17 A[14:0] B[17]#15 17n[14:0] and2
Xn18 A[13:0] B[18]#14 18n[13:0] and2
Xn19 A[12:0] B[19]#13 19n[12:0] and2
Xn20 A[11:0] B[20]#12 20n[11:0] and2
Xn21 A[10:0] B[21]#11 21n[10:0] and2
Xn22 A[9:0] B[22]#10 22n[9:0] and2
Xn23 A[8:0] B[23]#9 23n[8:0] and2
Xn24 A[7:0] B[24]#8 24n[7:0] and2
Xn25 A[6:0] B[25]#7 25n[6:0] and2
Xn26 A[5:0] B[26]#6 26n[5:0] and2
Xn27 A[4:0] B[27]#5 27n[4:0] and2
Xn28 A[3:0] B[28]#4 28n[3:0] and2
Xn29 A[2:0] B[29]#3 29n[2:0] and2
Xn30 A[1:0] B[30]#2 30n[1:0] and2
Xn31 A[0] B[31] 31n[0] and2


XGND01 01c[0] constant0
XGND02 02c[0] constant0
XGND03 03c[0] constant0
XGND04 04c[0] constant0
XGND05 05c[0] constant0
XGND06 06c[0] constant0
XGND07 07c[0] constant0
XGND08 08c[0] constant0
XGND09 09c[0] constant0
XGND10 10c[0] constant0
XGND11 11c[0] constant0
XGND12 12c[0] constant0
XGND13 13c[0] constant0
XGND14 14c[0] constant0
XGND15 15c[0] constant0
XGND16 16c[0] constant0
XGND17 17c[0] constant0
XGND18 18c[0] constant0
XGND19 19c[0] constant0
XGND20 20c[0] constant0
XGND21 21c[0] constant0
XGND22 22c[0] constant0
XGND23 23c[0] constant0
XGND24 24c[0] constant0
XGND25 25c[0] constant0
XGND26 26c[0] constant0
XGND27 27c[0] constant0
XGND28 28c[0] constant0
XGND29 29c[0] constant0
XGND30 30c[0] constant0
XGND31 31c[0] constant0

XFA01 00n[31:1] 01n[30:0] 01c[30:0] 01sum[30:0] 01c[31:1] FA
XFA02 01sum[30:1] 02n[29:0] 02c[29:0] 02sum[29:0] 02c[30:1] FA
XFA03 02sum[29:1] 03n[28:0] 03c[28:0] 03sum[28:0] 03c[29:1] FA
XFA04 03sum[28:1] 04n[27:0] 04c[27:0] 04sum[27:0] 04c[28:1] FA
XFA05 04sum[27:1] 05n[26:0] 05c[26:0] 05sum[26:0] 05c[27:1] FA
XFA06 05sum[26:1] 06n[25:0] 06c[25:0] 06sum[25:0] 06c[26:1] FA
XFA07 06sum[25:1] 07n[24:0] 07c[24:0] 07sum[24:0] 07c[25:1] FA
XFA08 07sum[24:1] 08n[23:0] 08c[23:0] 08sum[23:0] 08c[24:1] FA
XFA09 08sum[23:1] 09n[22:0] 09c[22:0] 09sum[22:0] 09c[23:1] FA
XFA10 09sum[22:1] 10n[21:0] 10c[21:0] 10sum[21:0] 10c[22:1] FA
XFA11 10sum[21:1] 11n[20:0] 11c[20:0] 11sum[20:0] 11c[21:1] FA
XFA12 11sum[20:1] 12n[19:0] 12c[19:0] 12sum[19:0] 12c[20:1] FA
XFA13 12sum[19:1] 13n[18:0] 13c[18:0] 13sum[18:0] 13c[19:1] FA
XFA14 13sum[18:1] 14n[17:0] 14c[17:0] 14sum[17:0] 14c[18:1] FA
XFA15 14sum[17:1] 15n[16:0] 15c[16:0] 15sum[16:0] 15c[17:1] FA
XFA16 15sum[16:1] 16n[15:0] 16c[15:0] 16sum[15:0] 16c[16:1] FA
XFA17 16sum[15:1] 17n[14:0] 17c[14:0] 17sum[14:0] 17c[15:1] FA
XFA18 17sum[14:1] 18n[13:0] 18c[13:0] 18sum[13:0] 18c[14:1] FA
XFA19 18sum[13:1] 19n[12:0] 19c[12:0] 19sum[12:0] 19c[13:1] FA
XFA20 19sum[12:1] 20n[11:0] 20c[11:0] 20sum[11:0] 20c[12:1] FA
XFA21 20sum[11:1] 21n[10:0] 21c[10:0] 21sum[10:0] 21c[11:1] FA
XFA22 21sum[10:1] 22n[9:0] 22c[9:0] 22sum[9:0] 22c[10:1] FA
XFA23 22sum[9:1] 23n[8:0] 23c[8:0] 23sum[8:0] 23c[9:1] FA
XFA24 23sum[8:1] 24n[7:0] 24c[7:0] 24sum[7:0] 24c[8:1] FA
XFA25 24sum[7:1] 25n[6:0] 25c[6:0] 25sum[6:0] 25c[7:1] FA
XFA26 25sum[6:1] 26n[5:0] 26c[5:0] 26sum[5:0] 26c[6:1] FA
XFA27 26sum[5:1] 27n[4:0] 27c[4:0] 27sum[4:0] 27c[5:1] FA
XFA28 27sum[4:1] 28n[3:0] 28c[3:0] 28sum[3:0] 28c[4:1] FA
XFA29 28sum[3:1] 29n[2:0] 29c[2:0] 29sum[2:0] 29c[3:1] FA
XFA30 29sum[2:1] 30n[1:0] 30c[1:0] 30sum[1:0] 30c[2:1] FA
XFA31 30sum[1] 31n[0] 31c[0] P[31] 31c[1] FA

.connect 00n[0] P[0]
.connect 01sum[0] P[1]
.connect 02sum[0] P[2]
.connect 03sum[0] P[3]
.connect 04sum[0] P[4]
.connect 05sum[0] P[5]
.connect 06sum[0] P[6]
.connect 07sum[0] P[7]
.connect 08sum[0] P[8]
.connect 09sum[0] P[9]
.connect 10sum[0] P[10]
.connect 11sum[0] P[11]
.connect 12sum[0] P[12]
.connect 13sum[0] P[13]
.connect 14sum[0] P[14]
.connect 15sum[0] P[15]
.connect 16sum[0] P[16]
.connect 17sum[0] P[17]
.connect 18sum[0] P[18]
.connect 19sum[0] P[19]
.connect 20sum[0] P[20]
.connect 21sum[0] P[21]
.connect 22sum[0] P[22]
.connect 23sum[0] P[23]
.connect 24sum[0] P[24]
.connect 25sum[0] P[25]
.connect 26sum[0] P[26]
.connect 27sum[0] P[27]
.connect 28sum[0] P[28]
.connect 29sum[0] P[29]
.connect 30sum[0] P[30]
.ends

.subckt alu ALUFN[5:0] A[31:0] B[31:0] alu[31:0] z v n
*multiplier requires adder unit too
Xmultiplier A[31:0] B[31:0] P[31:0] multiply32
Xselectop ALUFN[0]#32 ALUFN[1]#32 adderS[31:0] adderS[31:0] P[31:0] 0#32 S[31:0] mux4 

Xadderunit ALUFN[0] A[31:0] B[31:0] adderS[31:0] z v n adder32 
Xbooleanunit ALUFN[3:0] A[31:0] B[31:0] boole[31:0] boole32
Xshiftunit ALUFN[1:0] A[31:0] B[4:0] shift[31:0] shift32
Xcompareunit ALUFN[2:1] z v n cmp[31:0] compare32
XcombinemuxtoALU ALUFN[4]#32 ALUFN[5]#32 S[31:0] boole[31:0] shift[31:0] cmp[31:0] alu[31:0] mux4

.ends







.include beta.uasm
.include lab7macros.uasm
.include lab7checkoff.uasm

||| Handler for opcode 1 extension:
||| swapreg(RA,RC) swaps the contents of the two named registers.
||| UASM defn = .macro swapreg(RA,RC) betaopc(0x01,RA,0,RC)

regs:   RESERVE(32)                     | Array used to store register contents

UI: 
        save_all_regs(regs)
 
        LD(xp,-4,r0)                    | illegal instruction
        extract_field(r0, 31, 26, r1)   | extract opcode, bits 31:26
        |||CMPEQC(r1,0x1,r2)              | OPCODE=1?
        |||BT(r2, swapreg)                | yes, handle the swapreg instruction.

	CMPEQC(r1,0x10,r2)              | OPCODE=0b010000
        BT(r2, LDB_handler)             | handle LDB insrtuction
	CMPEQC(r1,0x11,r2)              | OPCODE=0b010001
        BT(r2, STB_handler)             | handle STB insrtuction

        LD(r31,regs,r0)                 | It is something else.  Restore regs
        LD(r31,regs+4,r1)               | we've used, and go to the system's
        LD(r31,regs+8,r2)               | Illegal Instruction handler.
        BR(_IllegalInstruction)	      ||| lab7checkoff required 

|||swapreg:
|||        extract_field(r0, 25, 21, r1)   | extract rc field
|||        MULC(r1, 4, r1)                 | convert to byte offset into regs array
|||        extract_field(r0, 20, 16, r2)   | extract ra
|||        MULC(r2, 4, r2)                 | convert to byte offset into regs array
|||        LD(r1, regs, r3)                | r3 <- regs[rc]
|||        LD(r2, regs, r4)                | r4 <- regs[ra]
|||        ST(r4, regs, r1)                | regs[rc] <- old regs[ra]
|||        ST(r3, regs, r2)                | regs[ra] <- old regs[rc]
|||     
|||        restore_all_regs(regs)
|||        JMP(xp)

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
||| for LDB: 
|||	r0 LDB instruction
|||	r1 rc pointer
|||	r2 ra
|||	r3 literal 
|||	r4 MDATA
|||	r5 selected byte of MDATA
|||	r6 EA
|||	r7 EA[1] 
|||	r8 EA[0]
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

LDB_handler:
        extract_field(r0, 25, 21, r1)   | point to rc field
        MULC(r1, 4, r1)                 | convert to byte offset into regs array

        extract_field(r0, 20, 16, r2)   | extract ra field
        MULC(r2, 4, r2)                 | convert to byte offset into regs array
	LD(r2, regs, r2)		| r1 <- regs[ra]

        extract_field(r0, 15, 0, r3)    | extract literal field 
       
	||| regarding literal in two’s complement
	extract_field(r3, 15, 15, r4)   | extract sign bit and store r4 temp. 
	BF(r4, LDB_SEXT_literal, r31)   | if r4 == 0, no need to do two’s complement
	CMOVE(0xFFFF, r4)		| mask
	SHLC(r4, 16, r4)		
	ADD(r3, r4, r3)			| r3 <- literal in two’s complement


LDB_SEXT_literal:
	ADD(r3, r2, r6)			| EA
	LD(r6, 0, r4)			| MDATA
	extract_field(r6, 1, 1, r7)	| EA[1]
	extract_field(r6, 0, 0, r8)	| EA[0]

	BT(r7, LDB_handler_1x, r31)	


LDB_handler_0x:
	BT(r7, LDB_handler_01, r31)	

LDB_handler_00:
	extract_field(r4, 7, 0, r5) 
	ST(r5, regs, r1)
	BR(LDB_handler_completed, r31) 

LDB_handler_01:
	extract_field(r4, 15, 8, r5) 
	ST(r5, regs, r1)
	BR(LDB_handler_completed, r31) 


LDB_handler_1x:
	BT(r7, LDB_handler_11, r31)	

LDB_handler_10:
	extract_field(r4, 23, 16, r5) 
	ST(r5, regs, r1)
	BR(LDB_handler_completed, r31) 

LDB_handler_11:
	extract_field(r4, 31, 24, r5) 
	ST(r5, regs, r1)
	BR(LDB_handler_completed, r31) 


LDB_handler_completed: 
	restore_all_regs(regs)
        JMP(xp)





|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
||| for STB: 
|||	r0 STB instruction
|||	r1 rc
|||	r2 ra
|||	r3 literal 
|||	r4 MDATA 
|||	r5 MDATA mask
|||	r6 EA
|||	r7 EA[1] 
|||	r8 EA[0]
|||	r9  temp. space 1, 0xFF 
|||	r10 temp. space 2, generate mask 
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

STB_handler:
        extract_field(r0, 25, 21, r1)   | point to rc field
        MULC(r1, 4, r1)                 | convert to byte offset into regs array
	LD(r1, regs, r1)		| r1 <- regs[rc]
	extract_field(r1, 7, 0, r1)     | only reg[rc]7:0 is required 

        extract_field(r0, 20, 16, r2)   | extract ra field
        MULC(r2, 4, r2)                 | convert to byte offset into regs array
	LD(r2, regs, r2)		| r2 <- regs[ra]

        extract_field(r0, 15, 0, r3)    | extract literal field 
       
	||| regarding literal in two’s complement
	extract_field(r3, 15, 15, r4)   | extract sign bit and store r4 temp. 
	BF(r4, STB_SEXT_literal, r31)   | if r4 == 0, no need to do two’s complement
	CMOVE(0xFFFF, r4)		| mask
	SHLC(r4, 16, r4)		
	ADD(r3, r4, r3)			| r3 <- literal in two’s complement
	
	||| mask 
	CMOVE(0xFF, r9) 		| temp. space 1 
	CMOVE(0, r5) 			| MDARA mask reset


STB_SEXT_literal:
	ADD(r3, r2, r6)			| EA
	LD(r6, 0, r4)			| MDATA
	extract_field(r6, 1, 1, r7)	| EA[1]
	extract_field(r6, 0, 0, r8)	| EA[0]

	BT(r7, STB_handler_1x, r31)	


STB_handler_0x:
	SHLC(r9, 24, r5)
	SHLC(r9, 16, r10)
	ADD(r5, r10, r5) 
	BT(r8, LDB_handler_01, r31)	

STB_handler_00:
	SHLC(r9, 8, r10)
	ADD(r5, r10, r5)		 
	BR(STB_handler_completed, r31) 

STB_handler_01:
	ADD(r5, r9, r5)			
	SHLC(r1, 8, r1)
	BR(STB_handler_completed, r31) 


STB_handler_1x:
	SHLC(r9, 8, r5)
	ADD(r5, r9, r5)
	BT(STB_handler_11, r31)	

STB_handler_10:
	SHLC(r9, 24, r10)
	ADD(r5, r10, r5)
	SHLC(r1, 16, r1)
	BR(STB_handler_completed, r31) 

STB_handler_11:
	SHLC(r9, 16, r10)
	ADD(r5, r10, r5)
	SHLC(r1, 24, r1)
	BR(STB_handler_completed, r31) 


STB_handler_completed: 
	ADD(r4, r5, r4) 	      | masked MDATA
	ADD(r4, r1, r4)
	ST(r4, 0, r6)
	restore_all_regs(regs)
        JMP(xp)